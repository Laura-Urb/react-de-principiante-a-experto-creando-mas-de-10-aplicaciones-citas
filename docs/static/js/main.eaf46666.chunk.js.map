{"version":3,"sources":["componentes/Formulario.js","componentes/Cita.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","editarCita","error","setError","editarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuid","type","placeholder","onChange","Cita","eliminarCita","sintoma","onClick","App","citasGuardadas","JSON","parse","localStorage","getItem","citas","setCitas","nuevaCitas","filter","useEffect","setItem","stringify","mensaje","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.eaf46666.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\r\nimport uuid from 'uuid/v4';\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nconst Formulario = ({crearCita}) => {\r\n  const [cita, editarCita] = useState({\r\n    mascota: \"\",\r\n    propietario: \"\",\r\n    fecha: \"\",\r\n    hora: \"\",\r\n    sintomas: \"\"\r\n  });\r\n\r\n  const [error, setError] = useState(false);\r\n\r\n  const { mascota, propietario, fecha, hora, sintomas } = cita;\r\n\r\n  const editarState = e => {\r\n    editarCita({\r\n      ...cita,\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  const submitCita = e => {\r\n    e.preventDefault();\r\n\r\n    //Validar\r\n    if (\r\n      mascota.trim() === \"\" ||\r\n      propietario.trim() === \"\" ||\r\n      fecha.trim() === \"\" ||\r\n      hora.trim() === \"\" ||\r\n      sintomas.trim() === \"\"\r\n    ) {\r\n      setError(true);\r\n      return;\r\n    }\r\n\r\n    //Eliminar el mensaje precio\r\n    setError(false);\r\n\r\n    //Asignar Id\r\n    cita.id = uuid();\r\n\r\n    //Crear la cita\r\n    crearCita(cita);\r\n\r\n    //Reiniciar la cita\r\n    editarCita({\r\n      mascota: \"\",\r\n      propietario: \"\",\r\n      fecha: \"\",\r\n      hora: \"\",\r\n      sintomas: \"\"\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <h2>Crear Cita</h2>\r\n      {error ? (\r\n        <p className=\"alerta-error\">Todos los campos son obligatorios</p>\r\n      ) : null}\r\n      <form onSubmit={submitCita}>\r\n        <label>Nombre Mascota</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"mascota\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Nombre Mascota\"\r\n          onChange={editarState}\r\n          value={mascota}\r\n        />\r\n        <label>Nombre Dueño</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"propietario\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Nombre Dueño de la Mascota\"\r\n          onChange={editarState}\r\n          value={propietario}\r\n        />\r\n        <label>Fecha</label>\r\n        <input\r\n          type=\"date\"\r\n          name=\"fecha\"\r\n          className=\"u-full-width\"\r\n          onChange={editarState}\r\n          value={fecha}\r\n        />\r\n        <label>Hora</label>\r\n        <input\r\n          type=\"time\"\r\n          name=\"hora\"\r\n          className=\"u-full-width\"\r\n          onChange={editarState}\r\n          value={hora}\r\n        />\r\n        <label>Sintomas</label>\r\n        <textarea\r\n          name=\"sintomas\"\r\n          className=\"u-full-width\"\r\n          onChange={editarState}\r\n          value={sintomas}\r\n        />\r\n        <button type=\"submit\" className=\"u-full-width button-primary\">\r\n          Agregar Cita\r\n        </button>\r\n      </form>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nFormulario.propTypes = {\r\n  crearCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;\r\n","import React from \"react\"; //imr\r\nimport { PropTypes } from \"prop-types\";\r\n\r\n//sfc\r\nconst Cita = ({ cita, eliminarCita}) => (\r\n  <div className=\"cita\">\r\n    <p>\r\n      Mascota: <span>{cita.mascota}</span>\r\n    </p>\r\n    <p>\r\n      Propietario: <span>{cita.propietario}</span>\r\n    </p>\r\n    <p>\r\n      Fecha: <span>{cita.fecha}</span>\r\n    </p>\r\n    <p>\r\n      Hora: <span>{cita.hora}</span>\r\n    </p>\r\n    <p>\r\n      Sintoma: <span>{cita.sintoma}</span>\r\n    </p>\r\n    <button\r\n      className=\"button eliminar u-full-width\"\r\n      onClick={() => eliminarCita(cita.id)}\r\n    >\r\n      Eliminar\r\n    </button>\r\n  </div>\r\n);\r\n\r\nCita.propTypes  = {\r\n    cita: PropTypes.object.isRequired,\r\n    eliminarCita: PropTypes.func.isRequired\r\n}\r\nexport default Cita;\r\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport Formulario from \"./componentes/Formulario\";\nimport Cita from \"./componentes/Cita\";\n\nfunction App() {\n\n  let citasGuardadas = JSON.parse(localStorage.getItem(\"citas\"));\n\n  const [citas, setCitas] = useState([]);\n\n  if (!citasGuardadas) {\n    citasGuardadas = [];\n  }\n\n  const crearCita = cita => {\n    setCitas([...citas, cita]);\n  };\n\n  const eliminarCita = id => {\n    const nuevaCitas = citas.filter(cita => cita.id !== id);\n    setCitas(nuevaCitas);\n  };\n\n  useEffect(() => {\n    let citasGuardadas = JSON.parse(localStorage.getItem(\"citas\"));\n    if (citasGuardadas) localStorage.setItem(\"citas\", JSON.stringify(citas));\n    else localStorage.setItem(\"citas\", JSON.stringify([]));\n  }, [citas]);\n\n  const mensaje = citas.length > 0 ? \"Administra tus citas\" : \"No hay citas\";\n\n  return (\n    <Fragment>\n      <h1>Administrador de Pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario crearCita={crearCita}></Formulario>\n          </div>\n          <div className=\"one-half column\">\n            <h2>{mensaje}</h2>\n            {citas.map(cita => (\n              <Cita\n                key={cita.id}\n                cita={cita}\n                eliminarCita={eliminarCita}\n              ></Cita>\n            ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}